# contains definitions for the CPU architecture used (compiler,
# build process parameters, tools used for upload, etc.)
# See: https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=piif
version=0.1

## PREDIFINED PROPERTIES :
# {runtime.hardware.path}  - the absolute path of the *hardware* folder     
# {runtime.ide.path}       - the absolute path of the Arduino IDE folder     
# {runtime.ide.version}    - the version number of the Arduino IDE as a number (for example "152" for Arduino IDE 1.5.2)     
# {runtime.os}             - the running OS ("linux", "windows", "macosx")      
# {build.path}             - The path to the temporary folder to store build artifacts
# {build.project_name}     - The project name
#
# + for each compilation step :
# {ide_version}              - the IDE version (ex. "152" for Arduino IDE 1.5.2)
# {includes}                 - the list of include paths in the format "-I/include/path -I/another/path...."
# {source_file}              - the path to the source file
# {object_file}              - the path to the output file


# AVR compile variables
# --------------------- 

compiler.path=
#{runtime.ide.path}/hardware/tools/avr/bin/

compiler.c.cmd=gcc
compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -fPIC -MMD

compiler.c.elf.flags=-w -Os -Wl,--gc-sections
compiler.c.elf.cmd=g++

compiler.S.flags=-c -g -x assembler-with-cpp

compiler.cpp.cmd=g++
compiler.cpp.flags=-c -g -Os -w -ffunction-sections -fdata-sections -fPIC -MMD

compiler.ar.cmd=ar
compiler.ar.flags=rcs

compiler.size.cmd=size

# This can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

# AVR compile patterns
# --------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" {object_files} "{build.path}/{archive_file}" "-L{build.path}" -lgd -lglut -lGL -lGLU

## Create eeprom
recipe.objcopy.eep.pattern=echo skipping eeprom phase

## Create hex
recipe.objcopy.hex.pattern=echo skipping hex phase

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*


# AVR Uploader/Programmers tools
# ------------------------------

tools.emulauncher.cmd.path=echo

tools.emulauncher.upload.params.verbose=-v
tools.emulauncher.upload.params.quiet=-q
tools.emulauncher.upload.pattern={build.path}/{build.project_name}.elf {upload.verbose} -c {build.board}

tools.emulauncher.program.params.verbose=-v
tools.emulauncher.program.params.quiet=-q
tools.emulauncher.program.pattern={build.path}/{build.project_name}.elf -p {runtime.hardware.path} {program.verbose} -c {build.board}

tools.emulauncher.erase.pattern=echo skipping erase phase
tools.emulauncher.bootloader.pattern=echo skipping bootloader phase

# USB Default Flags
# Default blank usb manufacturer will be filled it at compile time
# - from numeric vendor ID, set to Unknown otherwise
build.usb_manufacturer=
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'
